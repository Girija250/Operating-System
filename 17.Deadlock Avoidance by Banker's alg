#include <stdio.h>
#include <stdbool.h>

#define P 5  // Number of processes
#define R 3  // Number of resource types

// Function to check if the system is in a safe state
bool is_safe(int available[], int allocation[][R], int need[][R]) {
    int work[R];
    bool finish[P] = {0};
    for (int i = 0; i < R; i++) work[i] = available[i];
    
    while (1) {
        bool progress = false;
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                bool can_allocate = true;
                for (int j = 0; j < R; j++) {
                    if (need[i][j] > work[j]) {
                        can_allocate = false;
                        break;
                    }
                }
                if (can_allocate) {
                    for (int j = 0; j < R; j++) work[j] += allocation[i][j];
                    finish[i] = 1;
                    progress = true;
                }
            }
        }
        if (!progress) break;
    }
    
    for (int i = 0; i < P; i++) {
        if (!finish[i]) return false;
    }
    return true;
}

int main() {
    int available[] = {3, 3, 2};  // Available resources
    int max[][R] = { {7, 5, 3},  // Maximum resources required by each process
                     {3, 2, 2},
                     {9, 0, 2},
                     {2, 2, 2},
                     {4, 3, 3} };
    int allocation[][R] = { {0, 1, 0},  // Resources allocated to each process
                            {2, 0, 0},
                            {3, 0, 2},
                            {2, 1, 1},
                            {0, 0, 2} };
    int need[P][R];

    // Calculate the need matrix
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    if (is_safe(available, allocation, need)) {
        printf("System is in a safe state.\n");
    } else {
        printf("System is not in a safe state.\n");
    }

    return 0;
}
